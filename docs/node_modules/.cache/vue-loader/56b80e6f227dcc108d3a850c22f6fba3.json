{"remainingRequest":"/Users/nakamura/git/hi/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nakamura/git/hi/src/layout/MainNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nakamura/git/hi/src/layout/MainNavbar.vue","mtime":1554788840300},{"path":"/Users/nakamura/git/hi/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nakamura/git/hi/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nakamura/git/hi/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport MobileMenu from '@/layout/MobileMenu'\n\nlet resizeTimeout\nfunction resizeThrottler (actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null\n      actualResizeHandler()\n\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, 66)\n  }\n}\nexport default {\n  components: {\n    MobileMenu\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'white',\n      validator (value) {\n        return [\n          'white',\n          'default',\n          'primary',\n          'danger',\n          'success',\n          'warning',\n          'info'\n        ].includes(value)\n      }\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      extraNavClasses: '',\n      toggledClass: false\n    }\n  },\n  computed: {\n    showDownload () {\n      const excludedRoutes = ['login', 'landing', 'profile']\n      return excludedRoutes.every(r => r !== this.$route.name)\n    }\n  },\n  methods: {\n    bodyClick () {\n      let bodyClick = document.getElementById('bodyClick')\n\n      if (bodyClick === null) {\n        let body = document.querySelector('body')\n        let elem = document.createElement('div')\n        elem.setAttribute('id', 'bodyClick')\n        body.appendChild(elem)\n\n        let bodyClick = document.getElementById('bodyClick')\n        bodyClick.addEventListener('click', this.toggleNavbarMobile)\n      } else {\n        bodyClick.remove()\n      }\n    },\n    toggleNavbarMobile () {\n      this.NavbarStore.showNavbar = !this.NavbarStore.showNavbar\n      this.toggledClass = !this.toggledClass\n      this.bodyClick()\n    },\n    handleScroll () {\n      let scrollValue =\n        document.body.scrollTop || document.documentElement.scrollTop\n      let navbarColor = document.getElementById('toolbar')\n      this.currentScrollValue = scrollValue\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\n        this.extraNavClasses = `md-${this.type}`\n        navbarColor.classList.remove('md-transparent')\n      } else {\n        if (this.extraNavClasses) {\n          this.extraNavClasses = ''\n          navbarColor.classList.add('md-transparent')\n        }\n      }\n    },\n    scrollListener () {\n      resizeThrottler(this.handleScroll)\n    },\n    scrollToElement () {\n      let element_id = document.getElementById('downloadSection')\n      if (element_id) {\n        element_id.scrollIntoView({ block: 'end', behavior: 'smooth' })\n      }\n    }\n  },\n  mounted () {\n    document.addEventListener('scroll', this.scrollListener)\n  },\n  beforeDestroy () {\n    document.removeEventListener('scroll', this.scrollListener)\n  }\n}\n",{"version":3,"sources":["MainNavbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"MainNavbar.vue","sourceRoot":"src/layout","sourcesContent":["<template>\n  <md-toolbar\n    id=\"toolbar\"\n    md-elevation=\"0\"\n    class=\"md-transparent md-absolute\"\n    :class=\"extraNavClasses\"\n    :color-on-scroll=\"colorOnScroll\"\n  >\n    <div class=\"md-toolbar-row md-collapse-lateral\">\n      <div class=\"md-toolbar-section-start\">\n        <h3 class=\"md-title\">史料集版面ギャラリー（IIIF Collection版）</h3>\n      </div>\n    </div>\n  </md-toolbar>\n</template>\n\n<script>\nimport MobileMenu from '@/layout/MobileMenu'\n\nlet resizeTimeout\nfunction resizeThrottler (actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null\n      actualResizeHandler()\n\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, 66)\n  }\n}\nexport default {\n  components: {\n    MobileMenu\n  },\n  props: {\n    type: {\n      type: String,\n      default: 'white',\n      validator (value) {\n        return [\n          'white',\n          'default',\n          'primary',\n          'danger',\n          'success',\n          'warning',\n          'info'\n        ].includes(value)\n      }\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    }\n  },\n  data () {\n    return {\n      extraNavClasses: '',\n      toggledClass: false\n    }\n  },\n  computed: {\n    showDownload () {\n      const excludedRoutes = ['login', 'landing', 'profile']\n      return excludedRoutes.every(r => r !== this.$route.name)\n    }\n  },\n  methods: {\n    bodyClick () {\n      let bodyClick = document.getElementById('bodyClick')\n\n      if (bodyClick === null) {\n        let body = document.querySelector('body')\n        let elem = document.createElement('div')\n        elem.setAttribute('id', 'bodyClick')\n        body.appendChild(elem)\n\n        let bodyClick = document.getElementById('bodyClick')\n        bodyClick.addEventListener('click', this.toggleNavbarMobile)\n      } else {\n        bodyClick.remove()\n      }\n    },\n    toggleNavbarMobile () {\n      this.NavbarStore.showNavbar = !this.NavbarStore.showNavbar\n      this.toggledClass = !this.toggledClass\n      this.bodyClick()\n    },\n    handleScroll () {\n      let scrollValue =\n        document.body.scrollTop || document.documentElement.scrollTop\n      let navbarColor = document.getElementById('toolbar')\n      this.currentScrollValue = scrollValue\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\n        this.extraNavClasses = `md-${this.type}`\n        navbarColor.classList.remove('md-transparent')\n      } else {\n        if (this.extraNavClasses) {\n          this.extraNavClasses = ''\n          navbarColor.classList.add('md-transparent')\n        }\n      }\n    },\n    scrollListener () {\n      resizeThrottler(this.handleScroll)\n    },\n    scrollToElement () {\n      let element_id = document.getElementById('downloadSection')\n      if (element_id) {\n        element_id.scrollIntoView({ block: 'end', behavior: 'smooth' })\n      }\n    }\n  },\n  mounted () {\n    document.addEventListener('scroll', this.scrollListener)\n  },\n  beforeDestroy () {\n    document.removeEventListener('scroll', this.scrollListener)\n  }\n}\n</script>\n"]}]}